#!/bin/sh

GNUGREP="grep"
case $(uname | tr '[:upper:]' '[:lower:]') in
  netbsd|openbsd|darwin*)
    GNUGREP="ggrep"
    ;;
  freebsd*)
    GNUGREP="/usr/local/bin/grep"
    ;;
  *)
    ;;
esac

# dependencies check, see: https://github.com/yne/dzr/issues/12
FETCH=${FETCH:-curl -s} # FETCH="wget -q -O -" or FETCH="curl -s -k"
# handle CGI call, for example moving ./dzr* bin to ~/cgi-bin and running :
#     python3 -m http.server --cgi
# from your ~ (as non-root !) will reply to http://0.0.0.0:8000/cgi-bin/dzr?6113114,806027
if [ "$REQUEST_METHOD" = "HEAD" ] ; then
	printf 'Access-Control-Allow-Origin: *\ndzr-api: 0\n\n'
elif [ "$REQUEST_METHOD" = "GET" ] ; then
	printf "Cache-Control: max-age=31536000, immutable\nContent-Type: audio/mpeg\n\n"
	echo "$QUERY_STRING" | xargs basename | xargs $0-url | while read url id; do
		$FETCH "$url" | $0-dec $id
	done
fi
[ ! -z "$REQUEST_METHOD" ] && exit
for c in jq curl dialog openssl mpv; do
	command -v $c >/dev/null || { echo "$c is required" 1>&2 && exit 1 ;}
done
unscramble(){ printf "${8}${16}${7}${15}${6}${14}${5}${13}${4}${12}${3}${11}${2}${10}${1}${9}";}
# extraction + warning by charleywright, see: https://github.com/yne/dzr/issues/11
if [ -z "$DZR_CBC" ]; then
	echo -e "WARNING:\nDZR_CBC variable is unset\nextracting from web-player..."
	APP_WEB=$($FETCH -L deezer.com/en/channels/explore | ${GNUGREP} -Po "(?<=(script src=\"))https:\/\/[a-z-\.\/]+app-web[a-z0-9\.]+" | xargs $FETCH -L)
	TMP_CBC=$(echo "$APP_WEB" | ${GNUGREP} -Po "%5B(0x31|0x61)(%2C0x[0-9a-f]{2}){7}%5D" |  sed 's/%5[BD]//g;s/%/\\x/g' | xargs -0 printf %b | sed 's/0x/\\x/g;s/,/\n/g' | xargs -0 printf %b)
	export DZR_CBC=$(unscramble $TMP_CBC);
	echo -e "    echo \"export DZR_CBC="$DZR_CBC"\" >> .profile\nto avoid this warning"
	sleep 2 # give time to read the warning
fi
API="api.deezer.com"
DLG_LIST="dialog --keep-tite --output-fd 1 --menu $1: 0 0 0"
DLG_TEXT="dialog --keep-tite --output-fd 1 --inputbox $1: 0 0"
FMT_LIST='(if .data then .data else .tracks.data end)[]|("/"+.type+"/"+(.id|tostring), (.title+.name+" "+.artist.name|gsub("\\x22";"")))'
FMT_TRKS='"/track/"+([(if .data then .data else .tracks.data end)[]|select(.type=="track")|.id]|@csv)'
FMT_FUNC='s@[,?].*@@;s@[^a-zA-Z0-9]\{1,\}@_@g;s@[0-9,]\{1,\}@0@g;s@_\{1,\}$@@'

dzr()          { $DLG_LIST /search/track?q= 'by name' /search/artist?q= 'by name' /search/album?q= 'by name' /search/playlist?q= 'by name' /search/user?q= 'by name' /search/radio?q= 'by name' /genre 'list' /radio 'list' /user/0 'by id' ;} 
dzr_genre_0()  { $DLG_LIST radios '' artists '' ;}
dzr_radio_0()  { $DLG_LIST tracks '' fans '' ;}
dzr_album_0()  { $DLG_LIST tracks '' fans '' ;}
dzr_user_0()   { $DLG_LIST charts '' albums '' playlists '' flow '' tracks '' artists '' ;}
dzr_artist_0() { $DLG_LIST top?limit=50 '' albums '' fans '' related '' radio '' playlists '' ;}
dzr_default()  { $FETCH -H "Accept-Language: $LANG" "$API$1" | jq "$FMT_LIST" | xargs $DLG_LIST @ "play all /track/" ;} # TODO: .next
play() { # receive /track/1,2,3 from stdin
	xargs basename | xargs $0-url | while read url id; do
		$FETCH "$url" | $0-dec $id | eval ${PLAYER:-'mpv -'} ;
	done
}
for url in "$@"; do
	FUNC=$(echo "dzr_$url" | sed "$FMT_FUNC") # path (/search/artist?q=x) to function (dzr_search_artist)
	type $FUNC 1>/dev/null 2>/dev/null || FUNC=dzr_default
	case $url in # catch url that need user input (query, id)
		*=)  url="$url$($DLG_TEXT ''|jq -rR '.|@uri')" ;; # escaped query
		*/0) url="$url$($DLG_TEXT ''|jq -rR '.|@uri')" ;; # escaped id
		/track/*) echo $url | play; break ;;
	esac
	echo "$0 $url" >&2
	while path=$($FUNC $url); do # browse REPL
		case "$path" in
		@) echo "$API$url"; $FETCH "$API$url" | jq "$FMT_TRKS" | play ; break ;;
		/*) $0 "$path";;
		*)  $0 "$url/$path";;
		esac
	done
done
[ $# -eq 0 ] && $0 '' # give an argument to iterate over (if none given)
